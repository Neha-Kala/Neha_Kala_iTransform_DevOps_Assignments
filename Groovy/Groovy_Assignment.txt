Number Data Types 

a. What data type is the number 2? How about 20? 200? Keep adding zeros and watch the data type change until it reaches BigInteger.
 Then do the same for 2.0. 
----->
        2 to 2000000000 Integer
	2000000000 to 20000000000000000000 Long
	After 20000000000000000000  BigInteger

	2.0 to infinity BigDecimal
_____________________________________

b. Declare a variable x of type def and assign it the sum of 1 and 1.5. What is the resulting data type? 
----->BigDecimal
_____________________________________

c. What do you get when you divide 5 by 2? What is the resulting data type?  
---> 5 / 2 = 2.5 BigDecimal
If you wanted to do integer division (no remainder), what method would you call? 
---->5.intdiv(2) Ans = 2

_____________________________________________________________________________________________________________________________________________
Wrapper Classes 

From the associated wrapper classes, find the min and max values for the Java primitives: byte, short, int, long, float, double. 
--->
BYTE MAX -128
BYTE MAX 127
Short MAX -32768
Short MAX 32767
int MAX -2147483648
int MAX 2147483647
Float MAX 1.4E-45
Float MAX 3.4028235E38
Double MAX 4.9E-324
Double MAX 1.7976931348623157E308

_____________________________________________________________________________________________________________________________________________

2s Complement 
Create a byte variable with its maximum value. What do you get when you add 1 to it? 
--->  Integer

_____________________________________________________________________________________________________________________________________________
Strings and GroovyStrings 

a. How many characters are in the string "Hello, Groovy!"? 
-->
def str = "Hello, Groovy!"
println str.length()

ans- 14
______________________________________________
b. Define a string variable containing a name. Print a hello statement with your name using string concatenation, then using a Groovy string. 
-->
n = "Neha"
h = "Hello "
println (h + n)

String s = "Hello";
s = s.concat(" Groovy");
println(s);
__________________________________________________________________

c. Demonstrate that "racecar" is a palindrome by comparing it to its reverse. Do the same with "Bob", removing case sensitivity first. 
-->
def str = "racecar"
rev = str.reverse()

if (str.equalsIgnoreCase(rev)) {
           println("The given string is Palindrome");
        } else {
           println("The given string is NOT a Palindrome");
        }
-------------------------------------------
def str = "bob"
rev = str.reverse()

if (str.equalsIgnoreCase(rev)) {
           println("The given string is Palindrome");
        } else {
           println("The given string is NOT a Palindrome");
        }
___________________________________________________________________

d. Define a string variable containing the sentence, "Hello, World. How are you?". Split the sentence into an array using the split method.
Count the number of words. Do the same using the tokenize method. 
def s= "Hello, World. How are you?"
a = s.split(" ")
println a
println a.length

def s= "Hello, World. How are you?"
a = s.tokenize(" ")
println a

______________________________________________________________

e. Using the same sentence, use array notation (square brackets) to print the substring "World". \
-->
def s = "Hello, World. How are you?"
a = s.split(" ")
println a[1]
_______________________________________________________________

f. Use array notation to print the last word, but reversed. 
-->
def colors = ["Purple", "Blue", "Red","Black"] as String[]
last = colors[-1]
println last.reverse()
_____________________________________________________________________________________________________________________________________________

Prime Numbers 
-->
def t = 1..1000
def v = []

t.each { n ->
  (2..n).each { d ->
	if (n % d == 0 && n != d)
	v.add(n)
  }
}

println t - v - 1

_______________________________________________________________
Write a method called isPrime that takes an integer argument and returns a boolean. Determine whether the number is prime by dividing it by all numbers from 2 up to one less than the number. 

That limit is too high, of course. How high do you have to check to be sure whether you've gone far enough? 
-->
static boolean isPrimeNumber(int value) {
	def result=true
	for(int i=2; i<value;i++) {
		if(value%i == 0) {
			result = false
			break
		}
	}
	return result
}
println isPrimeNumber(7)
println isPrimeNumber(10)

ans -   true
	false

______________________________________________________________________________________________________________________________________________ 

Sorting Strings 

Create a list of strings. Sort them alphabetically. Sort them by length. Sort them by length in descending order. 

Advanced: Sort by length, then sort equal length strings alphabetically 
-->
def country = ['India', 'UK', 'Hungary', 'Thailand','France']
alpha =  country.sort() 
println "Sorted alphabetically - " +alpha
a = country.sort { it.size() }
println "Sorted lengthwise Ascending - "+a

d = country.sort { -it.size() }
println "Sorted Descending - "+d

_______________________________________________________

Processing a list of numbers 

Create a list of numbers. Add them together. First double each number, then add them up. Compute their average. 
-->
def lst = [11,12,13,14,15]
s = lst.value.sum()
println "Sum = "+s
for (i=0;i<=4;i++)
	lst[i]=lst[i]*2
println lst
s1 = lst.value.sum()
println "Sum = "+s1
l = lst.size()
avg = s1/l
println "Average = "+avg

________________________________________________________

Reading a web page 

Using the Groovy JDK, access your home page and display the source code. Print the length of each line of the home page. 
-->
def url = "https://groovy-lang.org/install.html".toURL().getText()
println url.eachLine { println it}
println url.eachLine { it -> println "The line is : " + it + "/n and size :"+it.size()}

_______________________________________________________
Closures as a filter 
Create a list of numbers. Print all elements greater than zero. 
-->
def lst = [1,2,3,4,5,0,-2,-3]
println lst.findAll {it > 0}
____________________________________________________________________

Multi-line strings 
Make a multi-line string. Compute the number of vowels on each line. 
-->
def string = """Groovy language can be used as a scripting language for the Java platform.
It is almost like a super version of Java which offers Java's enterprise capabilities. 
It also offers many productivity features like DSL support, closures, and dynamic typing."""

def vowels = ['a','e','i','o','u']
s = string.tokenize('\n')
def fl = s[0]
def first = fl.findAll {it -> it in vowels}
println"First line = "+first.size()+" vowels"
def sl = s[1]
def second = sl.findAll {it -> it in vowels}
println"Second line = "+second.size()+" vowels"
def tl = s[2]
def third = tl.findAll {it -> it in vowels}
println"Third line = "+third.size()+" vowels"
______________________________________________________


Padded binary output 
Print the numbers from 0 to 15 in binary (use Java's Integer.toBinaryString() method). Use a method in String from the Groovy JDK to make
all the output values have four digits. 
-->
for(int i = 0; i<=15 ; i++)
	println("Integer to binary conversion $i = " +Integer.toString(i,2))

_________________________________________________________________________________________________________________________________________ 

Encode and decode 

Create two strings, one for a username and one for a password. Concatenate them together, separated by a colon.
Use a method from the Groovy JDK to convert the resulting String to a byte array. Then use the encodeBase64 method on byte array to create an encoded string. 

Decode the string by using the decodeBase64 method, and using the result as an argument to the String constructor. Use the split method to return the original username and password. 
-->
def username = "Neha"
def password = "Neha@123"
String str = username + "," + password
byte[] byteArray = str.getBytes()
println byteArray
String encode = byteArray.encodeBase64().toString()
println "encoded String is : $encode"

byte[] decode = encode.decodeBase64()
println "decoded String is : $decode"
assert str == new String (decode)
______________________________________________________________________________

Sorting a list 
Create a class called Course, with a String attribute called name and an int attribute called days. \
Create a list of four course instances, where at least two have the same number of days. Sort the list by number of days.
Then, sort the list by days, but when the days are equal, sort by name. 



Operator overloading 
Create a class called Money with a double amount and a String currency (like USD or EUR).
Implement a plus method that checks that the currencies are the same and, if so, returns a new Money instance with the sum of the amounts
and the correct currency. Write a similar minus method. 
Write a MoneyTest class in Groovy that uses + and - and verifies that they work properly. 

 